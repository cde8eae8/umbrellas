import requests
import zipfile
import json
import tempfile
import shutil
import os
import os.path
import subprocess
import shlex
import sys
from PyQt5.QtWidgets import *
from tendo import singleton

# TODO download exceptions - no internet
# TODOK global lock for other updaters
# TODO relative path -> path to script
# TODO update if app doesn't exists || new_verison > version
# TODO don't update if version is == new_version
# TODO add dependencies
SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))

def download_file(url, local_filename):
    #local_filename = url.split('/')[-1]
    # NOTE the stream=True parameter below
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
    return local_filename

def has_new_version():
    try:
        with open(os.path.join(SCRIPT_DIR, 'app', 'config.json'), 'r') as config_f:
            config = json.load(config_f)
        current_version = int(config["version"]["v"])
    except:
        current_version = 0
    config_url = 'https://raw.githubusercontent.com/cde8eae8/umbrellas/master/config.json'

    print(f'requesting {config_url}...')
    try:
        r = requests.get(config_url)
        external_config = json.loads(r.text)
    except:
        return False
    new_version = int(external_config["version"]["v"])
    print(f'Current version {current_version}')
    print(f'New     version {new_version}')
    return current_version <= new_version

def update():
    repo_arch_url = 'https://github.com/cde8eae8/umbrellas/archive/master.zip'
    print('updating...')
    tmpdir = tempfile.mkdtemp(prefix='sheets-gui-')
    filename = os.path.join(tmpdir, 'source.zip')
    print(f'downloading from {repo_arch_url}...', end='')
    download_file(repo_arch_url, filename)
    print(f' -- done')
    with zipfile.ZipFile(filename, "r") as zip_f:
        extractdir = os.path.join(tmpdir, 'extracted')
        print(f'extracting to {extractdir}...', end='')
        zip_f.extractall(extractdir)
        print(f' -- done')
        appdir = os.path.join(SCRIPT_DIR, 'app')
        shutil.rmtree(appdir, ignore_errors=True)
        shutil.move(os.path.join(extractdir, 'umbrellas-master'), appdir)
        print('done')

def run(callback=''):
    me = singleton.SingleInstance()
    update()
    if callback:
        #args = shlex.split(callback)
        args = callback
        print(f'starting {args}')
        subprocess.Popen(args, start_new_session=True)
        print('started')

if __name__ == "__main__":
    app = QApplication([])
    try:
        run([sys.executable, os.path.join(SCRIPT_DIR, "app", "main.py")])
    except Exception as e:
        QMessageBox.critical(None, 'Error', repr(e))
        raise e

